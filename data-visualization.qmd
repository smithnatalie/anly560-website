---
title: "Data Visualization"
format: 
  html:
    theme: lux
    code-fold: true
---


### **1. Temperature: How has temperature in the state of Florida changed over the years?**


In this section, I want to use time series analysis in the form of time series plots and visualizations to analyze if Florida's minimum, maximum, and average temperature has changed over the years, and, if it has, to what extent it has changed. Although more analysis will need to be done later to determine the significance of these changes, starting with a visual approach will allow for immediate notice of trends over time. 

The goal of this first set of visualizations ties back to the following questions listed out in the Guiding Questions for Analysis listed out in the Introduction page of this project:

1. How has Floridaâ€™s temperature changed over the last few decades?
      i) Have averages temperatures continued to trend upwards?
      ii) Is Florida experiencing consistent record-high temperatures in the summer year after year?
      
2. Is Florida seeing consistent temperature increases in every season compared to previous years?
      i) For example, are winters in Florida in the 2010s and 2020s consistently hotter than the Florida winters of previous decades?

To begin to answer these questions, I will be looking at temperature changes observed during the month of **December** specifically.



#### Plotting December Temperature Data Using Plotly:


```{r, message=FALSE}
library(tidyverse)
library(tidyquant)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(lubridate)
library(plotly)
library(kableExtra)
library(dplyr)
```


As highlighted in the Data Sources tab of this project, the minimum, maximum, and monthly average temperatures from 1895-2022 in Florida are spread across three different datasets from NOAA's National Centers for Environmental Information. The first thing I need to do is combine this information into one cohesive data frame that can be used for analysis.


```{r}
#Reading in all three datasets:

avg.temp = read.csv("datasets/temperature/Avg_Temp_1895-2022.csv")
min.temp = read.csv("datasets/temperature/Min_Temp_1895-2022.csv")
max.temp = read.csv("datasets/temperature/Max_Temp_1895-2022.csv")


#For each, remove the first three rows and the last column, as these are not useful for this analysis
avg.temp = avg.temp[-(1:4),]
avg.temp = avg.temp %>% select(-December)

min.temp = min.temp[-(1:4),]
min.temp = min.temp %>% select(-December)

max.temp = max.temp[-(1:4),]
max.temp = max.temp %>% select(-December)

#Join all dataframes together 

temp.combo = list(avg.temp, min.temp, max.temp)
temp.combo = temp.combo %>% reduce(full_join, by='Florida')

#Rename 'Florida' column as Date

temp.combo = temp.combo %>% rename("Date" = "Florida")

# Change Date from character to actual date-time structure

temp.combo$Date = as.Date(paste0(as.character(temp.combo$Date), '01'), format = '%Y%m%d')

```


A table of the first ten values of the combined temperature dataframe can be seen below. (*Note that the date will always say "December 1st" of each month to ensure this is in proper datetime format - it is not necessarily the case that these temperatures (in the case of min and max) were observed on the first of each December.*):


```{r}
kable(head(temp.combo, 10), align = 'c') %>%
  kable_styling(font_size = 13) %>%
    row_spec(0, bold = TRUE, color = "white", background = "darkblue")
  
```

```{r}
require(dplyr)
require(plotly)
figure = plot_ly(x = ~temp.combo$Date, y= ~temp.combo$Average.Temperature) %>%
  add_lines(y = temp.combo$Maximum.Temperature, name = "Maximum Temperature") %>%
  add_lines(y = temp.combo$Average.Temperature, name = "Average Temperature") %>%
  add_lines(y = temp.combo$Minimum.Temperature, name = "Minimum Temperature") %>%
  
  layout(xaxis = list(title = "Year"), yaxis=list(title="Temperature (F)"), title = "December Temperatures in Florida (1895-2022)",
         legend  = list(x=100, y = 0.5))
  
  
figure
```


Overall, it's a bit hard to tell from this data visualization alone whether or not December temperatures on average across Florida have risen significantly. What we can see, however, are years with especially cold or especially warm December in the state. For example, 1931 and 2015 have the two highest maximum, minimum, and average temperatures across the entire dataset, while the coldest December on record was actually in 2010, followed by 1903. 

Interestingly enough, a quick search on Florida 2010 December yields a number of results, each reporting the year as the "Coldest December on Record", according to a report from NOAA's [2014 South Florida Weather Year in Review](https://www.weather.gov/media/mfl/news/2010WxSummary.pdf). In this report, they discuss that 2010 overall was a year of extremes, with the summer earlier in the year being recorded as the hottest summer in South Florida history. 


::: {.border}
:::


#### Plotting July Temperature Data Using ggplot:

Through using plotly 






### **Data Visualization with Stock Data**

In this section, I am going to be taking a look at the stock prices for three different oil and gas corporations between 2012 and 2022. The corporations being analyzed are:

-   ExxonMobil (XOM)
-   Chevron (CVX)
-   Shell (SHEL)

```{r ,echo=FALSE, message=FALSE, warning=FALSE}
library(flipbookr)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
```

Below, the head of the data can be seen, which shows the first week of stock prices being analyzed for each of the three corporations.

```{r, echo=FALSE}

options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)

tickers = c("XOM","CVX","SHEL")
for (i in tickers){
  getSymbols(i,
             from = "2012-10-01",
             to = "2022-12-01")}

x <- list(
  title = "date"
)
y <- list(
  title = "value"
)

stock <- data.frame(XOM$XOM.Adjusted,
                    CVX$CVX.Adjusted,
                    SHEL$SHEL.Adjusted)


stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append(tickers,'Dates')

stock$date<-as.Date(stock$Dates,"%Y-%m-%d")
head(stock)
```

The time series plot below shows how each of the three stocks have changed between 2012 and 2022. Chevron appears to be the clear winner, with significantly higher closing prices compared to Shell and ExxonMobil.

```{r, echo=FALSE}
ggplot(stock, aes(x=date)) +
  geom_line(aes(y=XOM, colour="XOM"))+
  geom_line(aes(y=CVX, colour="CVX"))+
  geom_line(aes(y=SHEL, colour="SHEL"))+
   labs(
    title = "Stock Prices for Oil and Gas Corporations",
    subtitle = "From 2012-2022",
    x = "Date",
    y = "Adjusted Closing Prices (USD)")+
    theme(panel.background = element_rect(fill = "white", colour = "grey50"))+ theme(plot.title=element_text(hjust = 0.5))+theme(plot.subtitle=element_text(hjust = 0.5))+
    guides(colour=guide_legend(title="Oil and Gas Companies"))

```

In the next time interactive series plot, we can hover over different points in time to get more in depth information about the specific closing prices for each of the three corporations on specific dates.

One of the clearest takeaways from this plot is the nosedive in closing prices for all three corporations on March 20th, 2020, which is right around when the COVID-19 pandemic began in the United States.

```{r, echo=FALSE}
g4<- ggplot(stock, aes(x=date)) +
  geom_line(aes(y=XOM, colour="XOM"))+
  geom_line(aes(y=CVX, colour="CVX"))+
  geom_line(aes(y=SHEL, colour="SHEL"))+
   labs(
    title = "Stock Prices for Oil and Gas Companies",
    subtitle = "From 2012-2022",
    x = "Date",
    y = "Adjusted Closing Prices (USD)")+
    guides(colour=guide_legend(title="Stock Prices for Oil and Gas Companies")) 


ggplotly(g4) %>%
  layout(hovermode = "x")
```

### **Bitcoin Plot Using plotly**

Here, I will take a look at a single stock price for Bitcoin. The head of the data is seen below.

```{r, echo=FALSE}
#bitc_ALL <- getSymbols("BTC",auto.assign = FALSE, from = "2020-10-01",src="yahoo")
bitc <- getSymbols("BTC",auto.assign = FALSE, from = "2021-09-15",src="yahoo") 
head(bitc)
```

The intial date I am looking at is seen below.

```{r, echo=FALSE}
start(bitc)
```

The final date I am looking at is also seen below.

```{r, echo=FALSE}
end(bitc)
```

More information on the Bitcoin data analyzed during the set time period can be seen below.
```{r, echo=FALSE}
bitc=data.frame(bitc)
bitc <- data.frame(bitc,rownames(bitc))
head(bitc)

colnames(bitc)[7] = "date"
head(bitc)

bitc$date<-as.Date(bitc$date,"%Y-%m-%d")
str(bitc)
```

In the following two plots, one static and one interactive, we can see how the stock price of Bitcoin has decreased since September of 2021. Although it appears to be making a recovery, it is still far from where it was in 2021.

```{r, echo=FALSE}
## ggplot
bitc %>%
  ggplot()+
  geom_line(aes(y=BTC.Adjusted,x=date),color="blue")+   labs(
    title = "Stock Price of Bitcoin",
    subtitle = "From 2021-2023",
    x = "Date",
    y = "Adjusted Closing Prices")+theme(plot.title=element_text(hjust = 0.5))+theme(plot.subtitle=element_text(hjust = 0.5))

## plotly
fig <- plot_ly(bitc, x = ~date, y = ~BTC.Adjusted, type = 'scatter', mode = 'lines')

fig <- fig %>% layout(title = "Stock Price of Bitcoin")
fig
```

The following plot is a basic candlestick chart showing the last 30 opening and closing prices for Bitcoin, beginning in December 2022 and ending mid-January of 2023. 

```{r, echo=FALSE}
#plotly
# candlestick plot

df <- tail(bitc, 30)

figc <- df %>% plot_ly(x = ~date, type="candlestick",
          open = ~BTC.Open, close = ~BTC.Close,
          high = ~BTC.High, low = ~BTC.Low) 
figc <- figc %>% layout(title = "Stock Price of Bitcoin")

figc
```

### **Plotting Climate Data Using plotly**

In the following plots, I will be taking a look at climate data in the Washington D.C. area for year of 2021. 

First, I will take a look at the changing precipitation levels in the area throughout the year as reported by the seven different stations across the DC area.

The stations are:

```{r, echo=FALSE}
climate = read.csv("datasets/climate.csv")
```

```{r, echo=FALSE}
library(tidyquant)
library(plotly)
library(RColorBrewer)
```
```{r, echo=FALSE}
unique(climate[c("STATION", "NAME")])
```
In the scatter plot below, the levels of precipitation across the year can be seen.

Here, we can see that snow only fell in the DC area between January and February of 2021, with a peak of 2 inches on February 2nd.

Rain, as expected, fell in the area during every month of the year, with a peak of about 3.8 inches on August 20th.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
figx = plot_ly(climate, type = "scatter", mode = "markers")%>%
  add_trace(x = ~DATE, y = ~PRCP, name = "Rain", marker = list(color = '#1969B1', line=list(color='#000000', width= 1)))%>%
  add_trace(x = ~DATE, y = ~SNOW, name = "Snow", marker = list(color = '#C6EEFC', line=list(color='#000000', width= 1)))%>%
  layout(showlegend=T)

figx = figx %>% layout(
        title = "Rain vs Snow in Washington DC (2021)",
        xaxis = list(zerolinecolor = '#ffffff',
                      zerolinewidth = 2,
                      gridcolor = 'ffffff',
                      title="Date"),
         yaxis = list(zerolinecolor = '#ffffff',
                      zerolinewidth = 2,
                      gridcolor = 'ffffff',
                      title="Precipitation (Inches)",
                      range=c(0.01, 4)),
         plot_bgcolor='#eff4f7', width = 700
)

figx
```













